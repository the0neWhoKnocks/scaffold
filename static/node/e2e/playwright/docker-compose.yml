# NOTE:
# - Using a separate compose file because the `VOL_` variables are only defined
#   via the test-runner, and can't define volumes via CLI since `up` is required
#   instead of `run` to allow for `--abort-on-container-exit` to work. Other
#   missing variables are ignored, but for some reason there's a yaml validation
#   check that fails for missing volume definitions even if I'm not trying to
#   run the container with the missing variables.
# - The context for `PWD` is the repo root since the test-runner is run via npm
#   in the project root.

services:
  #TOKEN:^DC__E2E_PROXY
  proxy:
    container_name: proxy
    environment:
      CRT: /home/node/certs/localhost.crt
      KEY: /home/node/certs/localhost.key
      MOCKS_PATH: /home/node/proxy/cache
      NODE_EXTRA_CA_CERTS: /home/node/certs/localhost-CA.crt
    image: theonewhoknocks/nodejs-proxy
    ports:
      - 9002:#TOKEN:#DC__E2E_PROXY_PORT
      - 9229:9229
    user: "${CURR_UID}:${CURR_GID}"
    volumes:
      # cert is required to handle any secure traffic
      - type: bind
        source: "${PWD}/certs"
        target: "/home/node/certs"
      - type: bind
        source: "${PWD}/e2e/proxy_cache"
        target: "/home/node/proxy/cache"
      - "${PWD}/proxy/matcher.js:/home/node/proxy/matcher.js"
  
  #TOKEN:$DC__E2E_PROXY
  #TOKEN:#DC__APP_NAME-test:
    extends:
      file: "${PWD}/docker-compose.yml"
      service: #TOKEN:#DC__EXT_APP_NAME
    container_name: #TOKEN:#DC__APP_NAME-test
    #TOKEN:^DC__E2E_PROXY
    depends_on:
      - proxy
    #TOKEN:$DC__E2E_PROXY
    environment:
      # DATA_PATH: /test/data.json
      #TOKEN:^DC__NODE_CERTS
      NODE_EXTRA_CA_CERTS: /home/node/certs/tests.crt
      #TOKEN:#DC__NODE_CERTS
      #TOKEN:^DC__E2E_PROXY
      # proxy stuff
      NODE_TLS_REJECT_UNAUTHORIZED: 0 # Using this to get around error "reason: Hostname/IP does not match certificate's altnames: Host: <HOST>. is not in the cert's altnames: DNS:localhost
      #TOKEN:$DC__E2E_PROXY
    healthcheck: # required for the test container to start
      interval: "3s"
      retries: 3
      start_interval: "2s"
      test: wget --no-verbose --tries=1 --spider --no-check-certificate #TOKEN:#DC__PROTOCOL://localhost:3000 || exit 1
      timeout: "2s"
    hostname: tests.lan # domain name (usually assigned via container name)
    #TOKEN:^DC__E2E_PROXY
    links:
      - "proxy:opentdb.com"
    ports:
      - 9230:9230
    #TOKEN:$DC__E2E_PROXY
    #TOKEN:^DC__NODE_CERTS
    volumes:
      - type: bind
        source: "${PWD}/certs"
        target: "/home/node/certs"
    #TOKEN:$DC__NODE_CERTS
  
  #TOKEN:#DC__APP_NAME-e2e:
    build:
      context: "${PWD}/e2e/.docker"
      dockerfile: Dockerfile
    command: $CMD
    container_name: #TOKEN:#DC__APP_NAME-e2e
    depends_on:
      #TOKEN:#DC__E2E_DEPENDS_ON:
        condition: service_healthy
    environment:
      BASE_URL: "#TOKEN:#DC__PROTOCOL://tests.lan:3000"
      DISPLAY: $TEST_DISPLAY
    hostname: e2etests
    ipc: host # Using `--ipc=host` is recommended when using Chrome (Docker docs). Chrome can run out of memory without this flag.
    ports:
      - "3001:3000"
    security_opt:
      - "seccomp:${PWD}/e2e/seccomp_profile.json"
    user: "${CURR_UID}:${CURR_GID}"
    volumes:
      #TOKEN:^DC__SECURE
      - "${PWD}/certs:/certs:r"
      #TOKEN:#DC__SECURE
      - "${PWD}/e2e:/e2e"
      - "${PWD}/src/constants.js:/node_modules/@src/constants.js:r" # map local modules to the fake `@src` parent
      - $VOL_DBUS
      - $VOL_X11
  #TOKEN:^DC__E2E_PROXY
  
  proxy:
    extends: 
      file: "${PWD}/docker-compose.yml"
      service: proxy
  
  proxied-app: 
    extends:
      file: "${PWD}/docker-compose.yml"
      service: proxied-app
    hostname: #TOKEN:#DC__APP_NAME # domain name (usually assigned via container name)
  #TOKEN:$DC__E2E_PROXY
